/*================================================================
ПРОЧИТАЙ ИНСТРУКЦИЮ В ФАЙЛЕ: Readme_gulp_info.md
================================================================*/

//==============================
//Переменные с названием папок исходного проекта и конечного проекта
//--------------------------
let project_folder = "dist"; //название папки с результатами работы Gulp (можно присвоть путь папки проекта чтобы 
                             //папка с конечными файлами называлась так же как и папка всего проекта: 
                             //<< let project_folder = require("path").basename(__dirname); >>)
let source_folder = "#src";  //название папки в которой будем работать (исходники)
//--------------------------
//==============================

//==============================================================================
// ПЕРЕМЕННАЯ ПУТЕЙ К ФАЙЛАМ И ПАПКАМ
let path = { // переменная содержащая пути к исходникам, конечным файлам и др.
  build:{ // объект хранящий пути вывода конечных файлов и папок
    html: project_folder + "/",        // HTML файлы
    css: project_folder + "/css/",     // CSS файлы
    js: project_folder + "/js/",       // Javascript файлы
    img: project_folder + "/img/",     // изображения
    fonts: project_folder + "/fonts/"  // шрифты
  },
  src:{ //объект хранящий пути к исходникам в которых ведется работа
    //----------------------------------------------------------
    // ** - слушаются все файлы во всех папках и подпапках пути
    //----------------------------------------------------------
    html: [source_folder + "/*.html", "!" + source_folder + "/_*.html"], // HTML файлы
    css: source_folder + "/scss/style.scss",                             // CSS файлы
    js: source_folder + "/js/script.js",                                 // Javascript файлы
    img: source_folder + "/img/**/*.+(jpg|png|svg|gif|ico|webp)",        // изображения
    fonts: source_folder + "/fonts/*.ttf"                                // шрифты
  },
  watch:{ // обьект постоянно слушающий изменения в файлах и папках проекта
          // налету (в браузере измененеия появляются сразу после сохранения)
    html: source_folder + "/**/*.html",
    css: source_folder + "/scss/**/*.scss",
    js: source_folder + "/js/**/*.js",
    img: source_folder + "/img/**/*.+(jpg|png|svg|gif|ico|webp)"
  },
  clean: "./" + project_folder + "/" // обьект автоматически чисящий
                                     // все файлы в конечной папке
}
//==============================================================================


//==============================================================================
let {src, dest} = require('gulp'), // переменные которым присвоен сам Gulp
  gulp = require('gulp'), // переменная с присвоенным Gulp для других задач

// ниже объявленны переменные плагинов

//------------------------------------------------
  browsersync = require("browser-sync").create(); // обновление страницы
//------------------------------------------------
  fileinclude = require("gulp-file-include"); // собирает конечный файл из нескольких подключенных
  del = require("del"); // очистка и обновление файлов в конечной папке
  scss = require("gulp-sass"); // конвертирует .scss файлы в .css
  autoprefixer = require("gulp-autoprefixer"); // автопрефиксер
  group_media = require("gulp-group-css-media-queries"); // группирует все медиа-запросы и ставит их в конец файла стилей
  clean_css = require("gulp-clean-css"); // минимизирует и сжимает файл со стилями
  rename = require("gulp-rename"); // переименовывает минимизированный файл стилей
  uglify = require("gulp-uglify-es").default; // сжатие и оптимизация .js файлов
  imagemin = require("gulp-imagemin"); // оптимизирует изображения
  webp = require("gulp-webp");
//==============================================================================

//==============================================================================
// ФУНКЦИЯ ОБНОВЛЯЮЩАЯ СТРАНИЦУ
function browserSync(params) {
  browsersync.init({                       // переменная с плагином и его инициализация
    
                                       // ниже обявленны настройки плагина
    
    server: {                              // настройка сервера
      baseDir: "./" + project_folder + "/" // указание базовой папки путь как
                                           //  в обьекте clean переменной path
    },
    port: 3000,                            // настройка порта
    
    directory: true,                       // иногда нужно писать чтобы не выходила ошибка "Cannot GET/" 
                                           // в браузере после подключения других плагинов, к примеру --gulp-imagemin--

    notify: false                          // отключенеи таблички с информацией, что страница обновилась
  })
}
//==============================================================================


//==============================================================================
// ФУНКЦИЯ ДЛЯ РАБОТЫ С HTML
function html() {
  return src(path.src.html)      // путь к исходникам
    .pipe(fileinclude())         // сборка подключаемых HTML файлов в один
    .pipe(dest(path.build.html)) // путь к конечной папке через переменную
                                 // через переменную -- dest--

    .pipe(browsersync.stream())  // обновление страницы через переменную
                                 // плагина browser-sync
}
//==============================================================================

//==============================================================================
// ФУНКЦИЯ ОБРАБОТКИ ФАЙЛОВ СТИЛЕЙ
function css() {
  return src(path.src.css)                          // путь к исходникам
    .pipe( 
      scss({                                        // конвертируем .scss файлы в .css
        outputStyle: "expanded"
      })
    )
    .pipe(
      group_media()                                 // группируем все медиа-запросы и ставим их в конец файла стилей
    )
    .pipe(
      autoprefixer({                                // обработка через автопрефиксер
        overrideBrowserslist: ["Last 4 versions"],
        cascade: true
      })
    )
    .pipe(dest(path.build.css))                     // создаем файл стилей с расширением .css (он не будет подключаться к HTML файлам, он для заказчика)
    .pipe(clean_css())                              // минимизируем и сжимаем файл со стилями *.css
    .pipe(
      rename({                                      // переименовываем минимизированный файл стилей
        extname: ".min.css"
      })
    )
    .pipe(dest(path.build.css))                     // создаем минимизированный файл стилей (он будет подключаться к HTML файлам)
    .pipe(browsersync.stream())                     // обновляем страницу
}
//==============================================================================

//==============================================================================
// ФУНКЦИЯ ДЛЯ ОБРАБОТКИ СКРИПТОВЫХ ФАЙЛОВ
function js() {
  return src(path.src.js)         // путь к исходникам
    .pipe(fileinclude())          // собираем подключаемые файлы скриптов в один файл
    .pipe(dest(path.build.js))    // выгружаем в конечную папку
    .pipe(
      uglify()                    // минимизируем и оптимизируем файл скриптов
    )
    .pipe(
      rename({                    // переименовываем минимизированный файл
        extname: ".min.js"
      })
    )
    .pipe(dest(path.build.js))    // выгружаем переименованный и минимизированный файл в конечную папку
    .pipe(browsersync.stream())   // обновляем браузер
}
//==============================================================================

//==============================================================================
// ФУНКЦИЯ ДЛЯ ОБРАБОТКИ ИЗОБРАЖЕНИЙ
function images() {
  return src(path.src.img)
    .pipe(
      webp({                                   // TODO: !!! ПРОВЕРИТЬ ПОЧЕМУ НЕ РАБОТАЕТ ДАННЫЙ ПЛАГИН !!!
        quality: 70                            // Gulp запускается нормально, но конвертации файлов в webp
      })                                       // не происходит
    )
    .pipe(dest(path.build.img))
    .pipe(src(path.src.img))
    .pipe(
      imagemin({
        progressive: true,
        svgoPlugins: [{removeViewBox: false}],  // TODO: !!! ПРОВЕРИТЬ ПОЧЕМУ НЕ РАБОТАЕТ ДАННЫЙ ПАРАМЕТР !!!
                                                // при запуске Gulp в браузере выходит ошибка, а при отключении этого
                                                // параметра все работает, т.е. плагин выдает ошибку при обработке .svg
        interlaced: true,
        optimizationLevel: 3 // 0 to 7
      })
    )
    .pipe(dest(path.build.img))
    .pipe(browsersync.stream())
}
//==============================================================================

//==============================================================================
//ФУНКЦИЯ СЛЕДЯЩАЯ ЗА ИЗМЕНЕНИЕМ ФАЙЛОВ В ИСХОДНИКЕ
function watchFiles(params) {
  gulp.watch([path.watch.html], html);
  gulp.watch([path.watch.css], css);
  gulp.watch([path.watch.js], js);
  gulp.watch([path.watch.img], images);
}
//==============================================================================

//==============================================================================
//ФУНКЦИЯ ОЧИСТКИ КОНЕЧНОЙ ПАПКИ
function clean(params) {
  return del(path.clean);
}

//==============================================================================
// переменная --build-- запускает функции которые должны запускаться
let build = gulp.series(clean, gulp.parallel(js, css, html, images));

// перменная --watch-- запускает функции которые должны постоянно работать
let watch = gulp.parallel(build, watchFiles, browserSync);
//==============================================================================

//==============================================================================
// переменные и функции для подключения к Gulp
// они берутся из переменных --build-- и --watch--
// объявленные выше
exports.images = images;
exports.js = js;
exports.css = css;
exports.html = html;
exports.build = build;
exports.watch = watch;
exports.default = watch;
